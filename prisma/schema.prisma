generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String            @id @default(uuid())
  email     String            @unique @db.VarChar(100)
  name      String?           @db.VarChar(50)
  username  String?           @db.VarChar(50)
  password  String?           @db.VarChar(100)
  phone     String?           @unique @db.VarChar(20)
  role      enum_admins_role? @default(admin)
  status    enum_status?      @default(active)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model User {
  id        String       @id @default(uuid())
  email     String       @unique @db.VarChar(100)
  name      String?      @db.VarChar(50)
  phone     String?      @db.VarChar(20)
  address   String?      @db.VarChar(100)
  city      String?      @db.VarChar(50)
  ktp       String?      @db.VarChar(20)
  photo     String?
  otp       String?      @db.VarChar(10)
  tokenFCM  String?      @db.VarChar(255)
  status    enum_status? @default(active)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  Transactions Transaction[]
}

model Article {
  id        String      @id @default(uuid())
  title     String?     @db.VarChar(255)
  content   String?
  image     String?     @db.VarChar(255)
  rating    Int         @default(0) @db.Integer
  status    enum_status @default(active)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Promo {
  id          String           @id @default(uuid())
  title       String?          @db.VarChar(255)
  content     String?
  image       String?          @db.VarChar(255)
  code        String?          @db.VarChar(255)
  type        enum_promo_type?
  discount    Int?
  limitCount  Int?
  maxDiscount Int?
  status      enum_status      @default(active)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  transactions Transaction[]
}

model Transaction {
  id          String    @id @default(uuid())
  address     String?
  latitude    String?   @db.VarChar(255)
  longitude   String?   @db.VarChar(255)
  amount      Int?
  discount    Int?
  total       Int?
  note        String?
  serviceDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  promo  String? @default(uuid())
  promos Promo?  @relation(fields: [promo], references: [id])

  user  String? @default(uuid())
  users User?   @relation(fields: [user], references: [id])

  price           String?         @default(uuid())
  servicePricings ServicePricing? @relation(fields: [price], references: [id])
}

model Category {
  id        String   @id @default(uuid())
  name      String?  @db.VarChar(255)
  icon      String?  @db.VarChar(255)
  orderFee  Int?
  status    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services Service[]
}

model Service {
  id          String   @id @default(uuid())
  name        String?  @db.VarChar(255)
  description String?
  icon        String?  @db.VarChar(255)
  status      Boolean? @default(true)
  orderMethod Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   String?   @default(uuid())
  categories Category? @relation(fields: [category], references: [id])
  // vehicleModel  String?       @default(uuid())
  // vehicleModels VehicleModel? @relation(fields: [vehicleModel], references: [id])

  serviceSpecialist ServiceSpecialist[]
  servicePricing    ServicePricing[]
}

model Specialist {
  id        String                   @id @default(uuid())
  name      String?                  @db.VarChar(255)
  city      String?                  @default(uuid())
  address   String?
  latitude  String?                  @db.VarChar(255)
  longitude String?                  @db.VarChar(255)
  phone     String?                  @db.VarChar(255)
  photo     String?
  balances  Int?
  status    enum_specialists_status? @default(offline)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  cities            Cities?             @relation(fields: [city], references: [id])
  serviceSpecialist ServiceSpecialist[]
}

model ServiceSpecialist {
  id         String   @id @default(uuid())
  specialist String?  @default(uuid())
  service    String?  @default(uuid())
  status     Boolean? @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  services    Service?    @relation(fields: [service], references: [id])
  specialists Specialist? @relation(fields: [specialist], references: [id])
}

model Cities {
  id        String   @id @default(uuid())
  name      String?  @db.VarChar(255)
  status    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)

  servicePricings ServicePricing[]
  specialists     Specialist[]
}

model ServicePricing {
  id        String   @id @default(uuid())
  price     Int?
  status    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service       String?      @default(uuid())
  services      Service?     @relation(fields: [service], references: [id])
  city          String       @default(uuid())
  cities        Cities       @relation(fields: [city], references: [id])
  vehicleModel  String       @default(uuid())
  vehicleModels VehicleModel @relation(fields: [vehicleModel], references: [id])

  transactions Transaction[]
}

model VehicleType {
  id        String   @id @default(uuid())
  name      String?  @db.VarChar(255)
  status    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brands VehicleBrand[]
}

model VehicleBrand {
  id        String   @id @default(uuid())
  name      String?  @db.VarChar(255)
  status    Boolean? @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type   String?        @default(uuid())
  types  VehicleType?   @relation(fields: [type], references: [id])
  models VehicleModel[]
}

model VehicleModel {
  id        String     @id @default(uuid())
  name      String?    @db.VarChar(255)
  size      enum_size? @default(middle)
  status    Boolean?   @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  brand  String?       @default(uuid())
  brands VehicleBrand? @relation(fields: [brand], references: [id])
  // types  VehicleType?  @relation(fields: [type], references: [id])

  // services       Service[]
  ServicePricing ServicePricing[]
}

enum enum_admins_role {
  super_admin @map("super admin")
  accounting
  admin
}

enum enum_status {
  active
  inactive
}

enum enum_promo_type {
  amount
  percent
}

enum enum_size {
  small
  middle
  big
}

enum enum_specialists_status {
  online
  offline
  banned
  pending
}

enum enum_transactions_status {
  pending
  taken
  unpaid
  paid
  ontheway
  process
  completed
  canceled
}
