generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String            @id @default(uuid())
  email     String            @unique @db.VarChar(100)
  name      String?           @db.VarChar(50)
  username  String?           @db.VarChar(50)
  password  String?           @db.VarChar(100)
  phone     String?           @unique @db.VarChar(20)
  role      enum_admins_role? @default(admin)
  status    enum_status?      @default(active)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model User {
  id        String       @id @default(uuid())
  email     String?      @unique @db.VarChar(100)
  name      String       @db.VarChar(50)
  phone     String       @db.VarChar(20)
  address   String?      @db.VarChar(150)
  city      String?      @db.VarChar(50)
  ktp       String?      @db.VarChar(20)
  photo     String?
  otp       String?      @db.VarChar(10)
  tokenFCM  String?      @db.VarChar(255)
  password  String?      @db.VarChar(100)
  status    enum_status? @default(active)
  referral  String?      @db.VarChar(100)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  bankAccounts BankAccount[]
  transactions Transaction[]
}

model Article {
  id        String      @id @default(uuid())
  title     String?     @db.VarChar(255)
  content   String?
  image     String?     @db.VarChar(255)
  rating    Int         @default(0)
  status    enum_status @default(active)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Promo {
  id           String           @id @default(uuid())
  title        String?          @db.VarChar(255)
  content      String?
  image        String?          @db.VarChar(255)
  code         String?          @db.VarChar(255)
  type         enum_promo_type?
  discount     Int?
  limitCount   Int?
  maxDiscount  Int?
  status       enum_status      @default(active)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  transactions Transaction[]
}

model Transaction {
  id          String                   @id @default(uuid())
  address     String?
  latitude    String?                  @db.VarChar(20)
  longitude   String?                  @db.VarChar(20)
  amount      Int?
  discount    Int?
  total       Int?
  note        String?
  createdAt   DateTime                 @default(now())
  updatedAt   DateTime                 @updatedAt
  orderDate   DateTime?
  status      enum_transactions_status @default(pending)
  alasanBatal String?                  @db.VarChar(255)

  promo  String? @default(uuid())
  promos Promo?  @relation(fields: [promo], references: [id])

  servicePrice    String?         @default(uuid())
  servicePricings ServicePricing? @relation(fields: [servicePrice], references: [id])

  user  String? @default(uuid())
  users User?   @relation(fields: [user], references: [id])

  vehicleModel  String?       @default(uuid())
  vehicleModels VehicleModel? @relation(fields: [vehicleModel], references: [id])

  payment      String?      @default(uuid())
  bankAccounts BankAccount? @relation(fields: [payment], references: [id])

  takeOnTransactions TakeOnTransaction[]
  saldoSpecialists   SaldoSpecialist[]
}

model TakeOnTransaction {
  id             String    @id @default(uuid())
  status         Boolean?  @default(true)
  selected       Boolean?  @default(false)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  orderMethod    String?   @db.VarChar(100)
  amountBids     Int?
  partnerRevenue Int?
  feeOrder       Int?
  rating         Int?
  ratingComment  String?   @db.VarChar(250)
  serviceDate    DateTime?

  specialist  String?     @default(uuid())
  specialists Specialist? @relation(fields: [specialist], references: [id])

  servicePriceOnSpecialist  String?                   @default(uuid())
  servicePriceOnSpecialists ServicePriceOnSpecialist? @relation(fields: [servicePriceOnSpecialist], references: [id])

  transaction  String      @default(uuid())
  transactions Transaction @relation(fields: [transaction], references: [id])
}

model Category {
  id        String    @id @default(uuid())
  name      String?   @db.VarChar(255)
  icon      String?   @db.VarChar(255)
  orderFee  Int?
  status    Boolean?  @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Service {
  id                        String                     @id @default(uuid())
  name                      String                     @db.VarChar(255)
  description               String?
  icon                      String?                    @db.VarChar(255)
  status                    Boolean?                   @default(true)
  orderMethod               Json?
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  category                  String                     @default(uuid())
  categories                Category                   @relation(fields: [category], references: [id])
  servicePriceOnSpecialists ServicePriceOnSpecialist[]
  servicePricings           ServicePricing[]
  //vehicleModels             VehicleModel[]
}

model Specialist {
  id        String                   @id @default(uuid())
  name      String                   @db.VarChar(100)
  address   String?
  latitude  String?                  @db.VarChar(20)
  longitude String?                  @db.VarChar(20)
  phone     String                   @db.VarChar(50)
  email     String?                  @db.VarChar(100)
  ktp       String?                  @db.VarChar(20)
  photo     String?
  otp       String?                  @db.VarChar(10)
  tokenFCM  String?                  @db.VarChar(255)
  password  String?                  @db.VarChar(100)
  status    enum_specialists_status? @default(offline)
  balances  Int?
  rating    Int?                     @default(0)
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt

  city   String? @default(uuid())
  cities Cities? @relation(fields: [city], references: [id])

  servicePriceOnSpecialist ServicePriceOnSpecialist[]
  takeOnTransactions       TakeOnTransaction[]
  bankAccounts             BankAccount[]
  saldoSpecialists         SaldoSpecialist[]
}

model ServicePricing {
  id           String        @id @default(uuid())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  price        Int
  service      String        @default(uuid())
  city         String        @default(uuid())
  vehicleSize  String?       @default(uuid())
  cities       Cities        @relation(fields: [city], references: [id])
  services     Service       @relation(fields: [service], references: [id])
  vehicleSizes VehicleSize?  @relation(fields: [vehicleSize], references: [id])
  transactions Transaction[]
}

model ServicePriceOnSpecialist {
  id               String   @id @default(uuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  price            Int
  priceDescription String?  @db.VarChar(200)
  specialist       String   @default(uuid())

  city   String @default(uuid())
  cities Cities @relation(fields: [city], references: [id])

  service     String     @default(uuid())
  services    Service    @relation(fields: [service], references: [id])
  specialists Specialist @relation(fields: [specialist], references: [id])

  vehicleSize        String?             @default(uuid())
  vehicleSizes       VehicleSize?        @relation(fields: [vehicleSize], references: [id])
  takeOnTransactions TakeOnTransaction[]
}

model VehicleSize {
  id                        String                     @id @default(uuid())
  name                      String?                    @db.VarChar(100)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  servicePriceOnSpecialists ServicePriceOnSpecialist[]
  servicePricings           ServicePricing[]
  vehicleModels             VehicleModel[]
}

model Cities {
  id                        String                     @id @default(uuid())
  name                      String?                    @db.VarChar(255)
  status                    Boolean?                   @default(true)
  createdAt                 DateTime                   @default(now())
  updatedAt                 DateTime                   @updatedAt
  deleted                   Boolean                    @default(false)
  servicePriceOnSpecialists ServicePriceOnSpecialist[]
  servicePricings           ServicePricing[]
  specialists               Specialist[]
}

model VehicleType {
  id        String         @id @default(uuid())
  name      String?        @db.VarChar(255)
  status    Boolean?       @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  brands    VehicleBrand[]
}

model VehicleBrand {
  id        String         @id @default(uuid())
  name      String?        @db.VarChar(255)
  status    Boolean?       @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  type      String         @default(uuid())
  types     VehicleType    @relation(fields: [type], references: [id])
  models    VehicleModel[]
}

model VehicleModel {
  id           String        @id @default(uuid())
  name         String?       @db.VarChar(255)
  status       Boolean?      @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  brand        String        @default(uuid())
  vehicleSize  String?
  transactions Transaction[]
  brands       VehicleBrand  @relation(fields: [brand], references: [id])

  // serviceId    String?
  // Service      Service?      @relation(fields: [serviceId], references: [id])

  vehicleSizes VehicleSize? @relation(fields: [vehicleSize], references: [id])
}

model BankAccount {
  id          String             @id @default(uuid())
  category    enum_account_type?
  brandName   String             @db.VarChar(100)
  accountName String             @db.VarChar(100)
  number      String?            @db.VarChar(50)
  isOnline    Boolean            @default(true)
  status      Boolean?           @default(true)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  specialist  String?     @default(uuid())
  specialists Specialist? @relation(fields: [specialist], references: [id])
  user        String?     @default(uuid())
  users       User?       @relation(fields: [user], references: [id])

  transactions Transaction[]
}

model SaldoSpecialist {
  id        String           @id @default(uuid())
  note      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  status    Boolean?         @default(false)
  type      enum_saldo_type?
  amount    Int?
  saldo     Int?

  specialist  String     @default(uuid())
  specialists Specialist @relation(fields: [specialist], references: [id])

  transaction  String?      @default(uuid())
  transactions Transaction? @relation(fields: [transaction], references: [id])
}

enum enum_admins_role {
  super_admin @map("super admin")
  accounting
  admin
}

enum enum_status {
  active
  inactive
}

enum enum_account_type {
  bank_transfer
  e_wallet
  qris
  cash
}

enum enum_promo_type {
  amount
  percent
}

enum enum_saldo_type {
  increase
  decrease
}

enum enum_size {
  small
  middle
  big
}

enum enum_specialists_status {
  online
  offline
  banned
  pending
}

enum enum_transactions_status {
  pending
  taken
  process
  unpaid
  paid
  completed
  canceled
}
